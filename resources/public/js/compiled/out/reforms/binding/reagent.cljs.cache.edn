;; Analyzed by ClojureScript 0.0-3211
{:defs {IBinding {:impls (default reagent.ratom/RCursor)}, do-swap! {:protocol-inline nil, :meta {:arglists (quote ([x ks f])), :private true, :end-column 16, :end-line 16, :column 8, :line 16, :file "/Users/martinb/dev/clojure_apps/reforms/re-frame-re-com-example/resources/public/js/compiled/out/reforms/binding/reagent.cljs"}, :private true, :name reforms.binding.reagent/do-swap!, :variadic false, :file "resources/public/js/compiled/out/reforms/binding/reagent.cljs", :end-column 16, :method-params ([x ks f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 16, :end-line 16, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x ks f])), :test true}, do-reset! {:protocol-inline nil, :meta {:arglists (quote ([x ks v])), :private true, :end-column 17, :end-line 11, :column 8, :line 11, :file "/Users/martinb/dev/clojure_apps/reforms/re-frame-re-com-example/resources/public/js/compiled/out/reforms/binding/reagent.cljs"}, :private true, :name reforms.binding.reagent/do-reset!, :variadic false, :file "resources/public/js/compiled/out/reforms/binding/reagent.cljs", :end-column 17, :method-params ([x ks v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 11, :end-line 11, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x ks v])), :test true}}, :imports nil, :requires {reagent.ratom reagent.ratom, reforms.binding.protocol reforms.binding.protocol}, :uses {IBinding reforms.binding.protocol, RCursor reagent.ratom}, :require-macros nil, :use-macros nil, :excludes #{}, :doc nil, :name reforms.binding.reagent}