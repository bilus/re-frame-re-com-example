;; Analyzed by ClojureScript 0.0-3211
{:use-macros nil, :excludes #{}, :name reforms.core.react-keys, :imports {IdGenerator goog.ui.IdGenerator}, :requires {IdGenerator goog.ui.IdGenerator, str clojure.string, clojure.string clojure.string, reforms.binding.core reforms.binding.core, binding reforms.binding.core}, :uses nil, :defs {gen-key {:protocol-inline nil, :meta {:top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists [[& args]], :arglists-meta (nil)}, :arglists (quote ([& args])), :end-column 14, :end-line 18, :column 7, :line 18, :file "/Users/martinb/dev/clojure_apps/reforms/re-frame-re-com-example/resources/public/js/compiled/out/reforms/core/react_keys.cljs"}, :name reforms.core.react-keys/gen-key, :variadic true, :file "resources/public/js/compiled/out/reforms/core/react_keys.cljs", :end-column 14, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists [[& args]], :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 18, :end-line 18, :max-fixed-arity 0, :fn-var true, :arglists [[& args]], :test true}, to-str {:protocol-inline nil, :meta {:arglists (quote ([x])), :end-column 13, :end-line 6, :column 7, :line 6, :file "/Users/martinb/dev/clojure_apps/reforms/re-frame-re-com-example/resources/public/js/compiled/out/reforms/core/react_keys.cljs"}, :name reforms.core.react-keys/to-str, :variadic false, :file "resources/public/js/compiled/out/reforms/core/react_keys.cljs", :end-column 13, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 6, :end-line 6, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :test true}}, :require-macros nil, :cljs.analyzer/constants {:order [:else], :seen #{:else}}, :doc nil}