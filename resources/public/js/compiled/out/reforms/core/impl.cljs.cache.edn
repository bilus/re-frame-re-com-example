;; Analyzed by ClojureScript 0.0-3211
{:use-macros nil, :excludes #{time}, :name reforms.core.impl, :imports {IdGenerator goog.ui.IdGenerator}, :requires {IdGenerator goog.ui.IdGenerator, str clojure.string, clojure.string clojure.string, reforms.core.react-keys reforms.core.react-keys, reforms.core.options reforms.core.options, reforms.binding.core reforms.binding.core, binding reforms.binding.core}, :uses {get-options reforms.core.options, gen-key reforms.core.react-keys}, :defs {html5-input* {:protocol-inline nil, :meta {:top-fn {:variadic true, :max-fixed-arity 6, :method-params [(attrs label placeholder cursor korks type opts)], :arglists [[attrs label placeholder cursor korks type & opts]], :arglists-meta (nil)}, :arglists (quote ([attrs label placeholder cursor korks type & opts])), :end-column 19, :end-line 238, :column 7, :line 238, :file "/Users/martinb/dev/clojure_apps/reforms/re-frame-re-com-example/resources/public/js/compiled/out/reforms/core/impl.cljs"}, :name reforms.core.impl/html5-input*, :variadic true, :file "resources/public/js/compiled/out/reforms/core/impl.cljs", :end-column 19, :top-fn {:variadic true, :max-fixed-arity 6, :method-params [(attrs label placeholder cursor korks type opts)], :arglists [[attrs label placeholder cursor korks type & opts]], :arglists-meta (nil)}, :method-params [(attrs label placeholder cursor korks type opts)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 238, :end-line 238, :max-fixed-arity 6, :fn-var true, :arglists [[attrs label placeholder cursor korks type & opts]], :test true}, resolve-args {:protocol-inline nil, :meta {:top-fn {:variadic true, :max-fixed-arity 3, :method-params [(ks ext-attrs args [opt-args])], :arglists [[ks ext-attrs args & [opt-args]]], :arglists-meta (nil)}, :arglists (quote ([ks ext-attrs args & [opt-args]])), :end-column 19, :end-line 61, :column 7, :line 61, :file "/Users/martinb/dev/clojure_apps/reforms/re-frame-re-com-example/resources/public/js/compiled/out/reforms/core/impl.cljs"}, :name reforms.core.impl/resolve-args, :variadic true, :file "resources/public/js/compiled/out/reforms/core/impl.cljs", :end-column 19, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(ks ext-attrs args [opt-args])], :arglists [[ks ext-attrs args & [opt-args]]], :arglists-meta (nil)}, :method-params [(ks ext-attrs args [opt-args])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 61, :end-line 61, :max-fixed-arity 3, :fn-var true, :arglists [[ks ext-attrs args & [opt-args]]], :test true}, input* {:protocol-inline nil, :meta {:top-fn {:variadic true, :max-fixed-arity 6, :method-params [(tag attrs label cursor korks {:keys [placeholder valid? validation-error-fn in-progress warn-fn help inline large]} inner)], :arglists [[tag attrs label cursor korks {:keys [placeholder valid? validation-error-fn in-progress warn-fn help inline large]} & inner]], :arglists-meta (nil)}, :arglists (quote ([tag attrs label cursor korks {:keys [placeholder valid? validation-error-fn in-progress warn-fn help inline large]} & inner])), :end-column 13, :end-line 208, :column 7, :line 208, :file "/Users/martinb/dev/clojure_apps/reforms/re-frame-re-com-example/resources/public/js/compiled/out/reforms/core/impl.cljs"}, :name reforms.core.impl/input*, :variadic true, :file "resources/public/js/compiled/out/reforms/core/impl.cljs", :end-column 13, :top-fn {:variadic true, :max-fixed-arity 6, :method-params [(tag attrs label cursor korks {:keys [placeholder valid? validation-error-fn in-progress warn-fn help inline large]} inner)], :arglists [[tag attrs label cursor korks {:keys [placeholder valid? validation-error-fn in-progress warn-fn help inline large]} & inner]], :arglists-meta (nil)}, :method-params [(tag attrs label cursor korks {:keys [placeholder valid? validation-error-fn in-progress warn-fn help inline large]} inner)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 208, :end-line 208, :max-fixed-arity 6, :fn-var true, :arglists [[tag attrs label cursor korks {:keys [placeholder valid? validation-error-fn in-progress warn-fn help inline large]} & inner]], :test true}, parse-options {:protocol-inline nil, :meta {:arglists (quote ([args])), :end-column 20, :end-line 73, :column 7, :line 73, :file "/Users/martinb/dev/clojure_apps/reforms/re-frame-re-com-example/resources/public/js/compiled/out/reforms/core/impl.cljs"}, :name reforms.core.impl/parse-options, :variadic false, :file "resources/public/js/compiled/out/reforms/core/impl.cljs", :end-column 20, :method-params ([args]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 73, :end-line 73, :max-fixed-arity 1, :fn-var true, :arglists (quote ([args])), :test true}, input-column {:protocol-inline nil, :meta {:top-fn {:variadic true, :max-fixed-arity 1, :method-params [(key elems)], :arglists [[key & elems]], :arglists-meta (nil)}, :arglists (quote ([key & elems])), :end-column 19, :end-line 140, :column 7, :line 140, :file "/Users/martinb/dev/clojure_apps/reforms/re-frame-re-com-example/resources/public/js/compiled/out/reforms/core/impl.cljs"}, :name reforms.core.impl/input-column, :variadic true, :file "resources/public/js/compiled/out/reforms/core/impl.cljs", :end-column 19, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(key elems)], :arglists [[key & elems]], :arglists-meta (nil)}, :method-params [(key elems)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 140, :end-line 140, :max-fixed-arity 1, :fn-var true, :arglists [[key & elems]], :test true}, unlabeled-control {:protocol-inline nil, :meta {:top-fn {:variadic true, :max-fixed-arity 2, :method-params [(key inline xs)], :arglists [[key inline & xs]], :arglists-meta (nil)}, :arglists (quote ([key inline & xs])), :end-column 24, :end-line 171, :column 7, :line 171, :file "/Users/martinb/dev/clojure_apps/reforms/re-frame-re-com-example/resources/public/js/compiled/out/reforms/core/impl.cljs"}, :name reforms.core.impl/unlabeled-control, :variadic true, :file "resources/public/js/compiled/out/reforms/core/impl.cljs", :end-column 24, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(key inline xs)], :arglists [[key inline & xs]], :arglists-meta (nil)}, :method-params [(key inline xs)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 171, :end-line 171, :max-fixed-arity 2, :fn-var true, :arglists [[key inline & xs]], :test true}, unstr-option {:protocol-inline nil, :meta {:arglists (quote ([s options])), :doc "Converts an option converted to string to be used in <select> tag back to its\n   representation as in options (it's often a keyword).\n\n   Example:\n\n   (unstr-option \":foo\"\n                [:foo \"foobar\" :foo2 \"zoobar\"]) ;; => :foo", :end-column 19, :end-line 87, :column 7, :line 87, :file "/Users/martinb/dev/clojure_apps/reforms/re-frame-re-com-example/resources/public/js/compiled/out/reforms/core/impl.cljs"}, :name reforms.core.impl/unstr-option, :variadic false, :file "resources/public/js/compiled/out/reforms/core/impl.cljs", :end-column 19, :method-params ([s options]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 87, :end-line 87, :max-fixed-arity 2, :fn-var true, :arglists (quote ([s options])), :doc "Converts an option converted to string to be used in <select> tag back to its\n   representation as in options (it's often a keyword).\n\n   Example:\n\n   (unstr-option \":foo\"\n                [:foo \"foobar\" :foo2 \"zoobar\"]) ;; => :foo", :test true}, labeled-control {:protocol-inline nil, :meta {:top-fn {:variadic true, :max-fixed-arity 5, :method-params [(key inline form-group-class label dom-id xs)], :arglists [[key inline form-group-class label dom-id & xs]], :arglists-meta (nil)}, :arglists (quote ([key inline form-group-class label dom-id & xs])), :end-column 22, :end-line 185, :column 7, :line 185, :file "/Users/martinb/dev/clojure_apps/reforms/re-frame-re-com-example/resources/public/js/compiled/out/reforms/core/impl.cljs"}, :name reforms.core.impl/labeled-control, :variadic true, :file "resources/public/js/compiled/out/reforms/core/impl.cljs", :end-column 22, :top-fn {:variadic true, :max-fixed-arity 5, :method-params [(key inline form-group-class label dom-id xs)], :arglists [[key inline form-group-class label dom-id & xs]], :arglists-meta (nil)}, :method-params [(key inline form-group-class label dom-id xs)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 185, :end-line 185, :max-fixed-arity 5, :fn-var true, :arglists [[key inline form-group-class label dom-id & xs]], :test true}, parse-args {:protocol-inline nil, :meta {:top-fn {:variadic false, :max-fixed-arity 3, :method-params ([args opt-args result] [args opt-args] [args]), :arglists ([args opt-args result] [args opt-args] [args]), :arglists-meta (nil nil nil)}, :arglists (quote ([args opt-args result] [args opt-args] [args])), :end-column 17, :end-line 47, :column 7, :line 47, :file "/Users/martinb/dev/clojure_apps/reforms/re-frame-re-com-example/resources/public/js/compiled/out/reforms/core/impl.cljs"}, :name reforms.core.impl/parse-args, :variadic false, :file "resources/public/js/compiled/out/reforms/core/impl.cljs", :end-column 17, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([args opt-args result] [args opt-args] [args]), :arglists ([args opt-args result] [args opt-args] [args]), :arglists-meta (nil nil nil)}, :method-params ([args opt-args result] [args opt-args] [args]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 47, :end-line 47, :max-fixed-arity 3, :fn-var true, :arglists ([args opt-args result] [args opt-args] [args]), :test true}, label-column-class {:protocol-inline nil, :meta {:arglists (quote ([])), :end-column 25, :end-line 130, :column 7, :line 130, :file "/Users/martinb/dev/clojure_apps/reforms/re-frame-re-com-example/resources/public/js/compiled/out/reforms/core/impl.cljs"}, :name reforms.core.impl/label-column-class, :variadic false, :file "resources/public/js/compiled/out/reforms/core/impl.cljs", :end-column 25, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 130, :end-line 130, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, extend-attrs {:protocol-inline nil, :meta {:arglists (quote ([attrs extensions])), :end-column 19, :end-line 20, :column 7, :line 20, :file "/Users/martinb/dev/clojure_apps/reforms/re-frame-re-com-example/resources/public/js/compiled/out/reforms/core/impl.cljs"}, :name reforms.core.impl/extend-attrs, :variadic false, :file "resources/public/js/compiled/out/reforms/core/impl.cljs", :end-column 19, :method-params ([attrs extensions]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 20, :end-line 20, :max-fixed-arity 2, :fn-var true, :arglists (quote ([attrs extensions])), :test true}, feedback-icon {:protocol-inline nil, :meta {:top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists [[& args]], :arglists-meta (nil)}, :arglists (quote ([& args])), :end-column 20, :end-line 150, :column 7, :line 150, :file "/Users/martinb/dev/clojure_apps/reforms/re-frame-re-com-example/resources/public/js/compiled/out/reforms/core/impl.cljs"}, :name reforms.core.impl/feedback-icon, :variadic true, :file "resources/public/js/compiled/out/reforms/core/impl.cljs", :end-column 20, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists [[& args]], :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 150, :end-line 150, :max-fixed-arity 0, :fn-var true, :arglists [[& args]], :test true}, override-attrs {:protocol-inline nil, :meta {:arglists (quote ([old new])), :end-column 21, :end-line 31, :column 7, :line 31, :file "/Users/martinb/dev/clojure_apps/reforms/re-frame-re-com-example/resources/public/js/compiled/out/reforms/core/impl.cljs"}, :name reforms.core.impl/override-attrs, :variadic false, :file "resources/public/js/compiled/out/reforms/core/impl.cljs", :end-column 21, :method-params ([old new]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 31, :end-line 31, :max-fixed-arity 2, :fn-var true, :arglists (quote ([old new])), :test true}, attrs? {:protocol-inline nil, :meta {:arglists (quote ([arg])), :end-column 13, :end-line 78, :column 7, :line 78, :file "/Users/martinb/dev/clojure_apps/reforms/re-frame-re-com-example/resources/public/js/compiled/out/reforms/core/impl.cljs"}, :name reforms.core.impl/attrs?, :variadic false, :file "resources/public/js/compiled/out/reforms/core/impl.cljs", :end-column 13, :method-params ([arg]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 78, :end-line 78, :max-fixed-arity 1, :fn-var true, :arglists (quote ([arg])), :test true}, input-column-class {:protocol-inline nil, :meta {:arglists (quote ([])), :end-column 25, :end-line 135, :column 7, :line 135, :file "/Users/martinb/dev/clojure_apps/reforms/re-frame-re-com-example/resources/public/js/compiled/out/reforms/core/impl.cljs"}, :name reforms.core.impl/input-column-class, :variadic false, :file "resources/public/js/compiled/out/reforms/core/impl.cljs", :end-column 25, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 135, :end-line 135, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, merge-attrs {:protocol-inline nil, :meta {:arglists (quote ([defaults overrides extensions])), :end-column 18, :end-line 41, :column 7, :line 41, :file "/Users/martinb/dev/clojure_apps/reforms/re-frame-re-com-example/resources/public/js/compiled/out/reforms/core/impl.cljs"}, :name reforms.core.impl/merge-attrs, :variadic false, :file "resources/public/js/compiled/out/reforms/core/impl.cljs", :end-column 18, :method-params ([defaults overrides extensions]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 41, :end-line 41, :max-fixed-arity 3, :fn-var true, :arglists (quote ([defaults overrides extensions])), :test true}, form-horizontal? {:protocol-inline nil, :meta {:arglists (quote ([])), :end-column 23, :end-line 126, :column 7, :line 126, :file "/Users/martinb/dev/clojure_apps/reforms/re-frame-re-com-example/resources/public/js/compiled/out/reforms/core/impl.cljs"}, :name reforms.core.impl/form-horizontal?, :variadic false, :file "resources/public/js/compiled/out/reforms/core/impl.cljs", :end-column 23, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 126, :end-line 126, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, error-label {:protocol-inline nil, :meta {:top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists [[& args]], :arglists-meta (nil)}, :arglists (quote ([& args])), :end-column 18, :end-line 155, :column 7, :line 155, :file "/Users/martinb/dev/clojure_apps/reforms/re-frame-re-com-example/resources/public/js/compiled/out/reforms/core/impl.cljs"}, :name reforms.core.impl/error-label, :variadic true, :file "resources/public/js/compiled/out/reforms/core/impl.cljs", :end-column 18, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists [[& args]], :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 155, :end-line 155, :max-fixed-arity 0, :fn-var true, :arglists [[& args]], :test true}, -p {:protocol-inline nil, :meta {:arglists (quote ([xs])), :end-column 9, :end-line 106, :column 7, :line 106, :file "/Users/martinb/dev/clojure_apps/reforms/re-frame-re-com-example/resources/public/js/compiled/out/reforms/core/impl.cljs"}, :name reforms.core.impl/-p, :variadic false, :file "resources/public/js/compiled/out/reforms/core/impl.cljs", :end-column 9, :method-params ([xs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 106, :end-line 106, :max-fixed-arity 1, :fn-var true, :arglists (quote ([xs])), :test true}, warning-label {:protocol-inline nil, :meta {:top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists [[& args]], :arglists-meta (nil)}, :arglists (quote ([& args])), :end-column 20, :end-line 160, :column 7, :line 160, :file "/Users/martinb/dev/clojure_apps/reforms/re-frame-re-com-example/resources/public/js/compiled/out/reforms/core/impl.cljs"}, :name reforms.core.impl/warning-label, :variadic true, :file "resources/public/js/compiled/out/reforms/core/impl.cljs", :end-column 20, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists [[& args]], :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 160, :end-line 160, :max-fixed-arity 0, :fn-var true, :arglists [[& args]], :test true}, maybe-flatten {:protocol-inline nil, :meta {:arglists (quote ([xs])), :end-column 20, :end-line 165, :column 7, :line 165, :file "/Users/martinb/dev/clojure_apps/reforms/re-frame-re-com-example/resources/public/js/compiled/out/reforms/core/impl.cljs"}, :name reforms.core.impl/maybe-flatten, :variadic false, :file "resources/public/js/compiled/out/reforms/core/impl.cljs", :end-column 20, :method-params ([xs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 165, :end-line 165, :max-fixed-arity 1, :fn-var true, :arglists (quote ([xs])), :test true}, spinner {:protocol-inline nil, :meta {:top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists [[& args]], :arglists-meta (nil)}, :arglists (quote ([& args])), :doc "A spinner.\n\n   Arguments:\n\n   [attrs]\n\n   attrs                 - (optional) attributes handed over to React (see https://github.com/r0man/sablono#html-attributes)", :end-column 14, :end-line 252, :column 7, :line 252, :file "/Users/martinb/dev/clojure_apps/reforms/re-frame-re-com-example/resources/public/js/compiled/out/reforms/core/impl.cljs"}, :name reforms.core.impl/spinner, :variadic true, :file "resources/public/js/compiled/out/reforms/core/impl.cljs", :end-column 14, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists [[& args]], :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 252, :end-line 252, :max-fixed-arity 0, :fn-var true, :arglists [[& args]], :doc "A spinner.\n\n   Arguments:\n\n   [attrs]\n\n   attrs                 - (optional) attributes handed over to React (see https://github.com/r0man/sablono#html-attributes)", :test true}, deprecated {:protocol-inline nil, :meta {:arglists (quote ([msg])), :end-column 17, :end-line 101, :column 7, :line 101, :file "/Users/martinb/dev/clojure_apps/reforms/re-frame-re-com-example/resources/public/js/compiled/out/reforms/core/impl.cljs"}, :name reforms.core.impl/deprecated, :variadic false, :file "resources/public/js/compiled/out/reforms/core/impl.cljs", :end-column 17, :method-params ([msg]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 101, :end-line 101, :max-fixed-arity 1, :fn-var true, :arglists (quote ([msg])), :test true}, gen-dom-id {:protocol-inline nil, :meta {:top-fn {:variadic false, :max-fixed-arity 2, :method-params ([path] [cursor korks] []), :arglists ([path] [cursor korks] []), :arglists-meta (nil nil nil)}, :arglists (quote ([path] [cursor korks] [])), :end-column 17, :end-line 114, :column 7, :line 114, :file "/Users/martinb/dev/clojure_apps/reforms/re-frame-re-com-example/resources/public/js/compiled/out/reforms/core/impl.cljs"}, :name reforms.core.impl/gen-dom-id, :variadic false, :file "resources/public/js/compiled/out/reforms/core/impl.cljs", :end-column 17, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([path] [cursor korks] []), :arglists ([path] [cursor korks] []), :arglists-meta (nil nil nil)}, :method-params ([path] [cursor korks] []), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 114, :end-line 114, :max-fixed-arity 2, :fn-var true, :arglists ([path] [cursor korks] []), :test true}}, :require-macros nil, :cljs.analyzer/constants {:order [:else :attrs :form :horizontal :label-column-class :input-column-class :div :class :key :feedback-icon :i :error-label :label :warning-label :div.form-group :form-group :label-column :input-column :for :control-label :large :inline :help :warn-fn :in-progress :validation-error-fn :valid? :placeholder :input :spinner :icon-warning :erorr-label :p.help-block :help-block :type :id :on-change :value], :seen #{:form-group :large :help-block :input-column :erorr-label :warn-fn :p.help-block :label-column-class :horizontal :feedback-icon :valid? :key :placeholder :in-progress :else :input-column-class :value :icon-warning :error-label :validation-error-fn :type :warning-label :div.form-group :spinner :div :for :label :id :class :control-label :attrs :label-column :form :input :help :on-change :i :inline}}, :doc nil}