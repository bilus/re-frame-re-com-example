;; Analyzed by ClojureScript 0.0-3211
{:use-macros nil, :excludes #{}, :name re-frame-re-com-example.views, :imports nil, :requires {f reforms.reagent, reforms.reagent reforms.reagent, re-com re-com.core, re-com.core re-com.core, re-frame.core re-frame.core, re-frame re-frame.core}, :uses nil, :defs {main-panel {:protocol-inline nil, :meta {:arglists (quote ([])), :end-column 17, :end-line 21, :column 7, :line 21, :file "/Users/martinb/dev/clojure_apps/reforms/re-frame-re-com-example/src/cljs/re_frame_re_com_example/views.cljs"}, :name re-frame-re-com-example.views/main-panel, :variadic false, :file "src/cljs/re_frame_re_com_example/views.cljs", :end-column 17, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 21, :end-line 21, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, simple-view {:protocol-inline nil, :meta {:arglists (quote ([])), :end-column 18, :end-line 13, :column 7, :line 13, :file "/Users/martinb/dev/clojure_apps/reforms/re-frame-re-com-example/src/cljs/re_frame_re_com_example/views.cljs"}, :name re-frame-re-com-example.views/simple-view, :variadic false, :file "src/cljs/re_frame_re_com_example/views.cljs", :end-column 18, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 13, :end-line 13, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, title {:protocol-inline nil, :meta {:arglists (quote ([])), :end-column 12, :end-line 6, :column 7, :line 6, :file "/Users/martinb/dev/clojure_apps/reforms/re-frame-re-com-example/src/cljs/re_frame_re_com_example/views.cljs"}, :name re-frame-re-com-example.views/title, :variadic false, :file "src/cljs/re_frame_re_com_example/views.cljs", :end-column 12, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 6, :end-line 6, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}}, :require-macros {reforms.reagent reforms.reagent, f reforms.reagent}, :cljs.analyzer/constants {:order [:name :label :level :level1 :data :login :height :children], :seen #{:children :name :login :level :label :level1 :height :data}}, :doc nil}