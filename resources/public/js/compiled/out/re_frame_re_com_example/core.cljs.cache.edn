;; Analyzed by ClojureScript 0.0-3211
{:use-macros nil, :excludes #{}, :name re-frame-re-com-example.core, :imports nil, :requires {views re-frame-re-com-example.views, re-frame-re-com-example.views re-frame-re-com-example.views, re-frame-re-com-example.subs re-frame-re-com-example.subs, re-frame-re-com-example.handlers re-frame-re-com-example.handlers, re-frame re-frame.core, re-frame.core re-frame.core, reagent.core reagent.core, reagent reagent.core}, :uses nil, :defs {init {:protocol-inline nil, :meta {:arglists (quote ([])), :export true, :end-column 20, :end-line 12, :column 16, :line 12, :file "/Users/martinb/dev/clojure_apps/reforms/re-frame-re-com-example/src/cljs/re_frame_re_com_example/core.cljs"}, :name re-frame-re-com-example.core/init, :variadic false, :file "src/cljs/re_frame_re_com_example/core.cljs", :end-column 20, :method-params ([]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 12, :end-line 12, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, mount-root {:protocol-inline nil, :meta {:arglists (quote ([])), :end-column 17, :end-line 8, :column 7, :line 8, :file "/Users/martinb/dev/clojure_apps/reforms/re-frame-re-com-example/src/cljs/re_frame_re_com_example/core.cljs"}, :name re-frame-re-com-example.core/mount-root, :variadic false, :file "src/cljs/re_frame_re_com_example/core.cljs", :end-column 17, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 8, :end-line 8, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}}, :require-macros nil, :cljs.analyzer/constants {:order [:initialize-db], :seen #{:initialize-db}}, :doc nil}